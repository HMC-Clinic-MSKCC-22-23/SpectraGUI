# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'OutputUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import scanpy as sc
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
matplotlib.use("Qt5Agg")
from spectra import spectra as spc

from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib import rcParams
rcParams.update({'figure.autolayout': True})

class OutputPage2(object):

    # def __init__(self, anndata = None, gene_dict = None, cell_type_key = None, lambda_val = None, highly_var = None, rho_val = None, delta_val = None, kappa_val = None, use_weights = None, top_genes = None):
    def __init__(self, screen_width, screen_height, anndata = None, model = None):
        sc.set_figure_params(facecolor="F0F0F0")

        # self.gene_dictionary = gene_dict
        # self.cell_type_key = cell_type_key
        # self.lam = lambda_val
        # self.highly_var = highly_var
        # self.rho = rho_val
        # self.delta = delta_val
        # self.kappa = kappa_val
        # self.use_weights = use_weights
        # self.top_genes = top_genes

        self.width = int(screen_width // 2.2)
        self.height = int(screen_height // 2.2)
        

        self.curr_factor = None

        self.anndata = anndata

        self.MainWindow = QtWidgets.QWidget()
        self.setupUi()
    
    def closeEvent(self, a0: QtGui.QCloseEvent) -> None:
        return super().closeEvent(a0)

    def test_umap(self):
        if self.curr_factor is not None:
            self.curr_factor += 1
        else:
            self.curr_factor = 0

        if self.anndata:
            self.recolor_umap()

    def draw_umap(self):

        self.ax = self.umap_canvas.figure.subplots()
        self.ax.grid(False)
        self.ax.set_xticks([])
        self.ax.set_yticks([])
        self.ax.set_title("UMAP")
        # if we have loaded anndata, draw colorless umap
        if self.anndata:
            self.umap_plot = self.ax.scatter(self.anndata.obsm["X_umap"][:,0], self.anndata.obsm["X_umap"][:,1], color = "grey", s = 2)
        else: # just draw a placeholder
            self.umap_plot = self.ax.plot([2,5,4,3.5,4,5,2])
    
    def recolor_umap(self):

        if self.umap_plot:
            self.umap_plot.remove()
            
        self.umap_plot = self.ax.scatter(self.anndata.obsm["X_umap"][:,0], self.anndata.obsm["X_umap"][:,1], c = self.anndata.obsm["SPECTRA_cell_scores"][:,self.curr_factor], s = 2, cmap = "inferno")
        self.umap_canvas.draw()

    def setupUi(self):

        self.MainWindow.setObjectName("MainWindow")
        self.MainWindow.resize(self.width, self.height)

        self.main_layout = QtWidgets.QGridLayout()

        self.plots = QtWidgets.QHBoxLayout()

        self.umap_canvas = FigureCanvasQTAgg(plt.Figure())
        self.draw_umap()

        self.heatmap_canvas = FigureCanvasQTAgg(plt.Figure())
        # self.draw_heatmap()

        self.plots.addWidget(self.umap_canvas)
        self.plots.addWidget(self.heatmap_canvas)

        self.main_layout.addLayout(self.plots, 0, 0, 1, 3)

        # frame to hold the output options
        self.output_options_frame = QtWidgets.QFrame()

        self.output_options = QtWidgets.QGridLayout()

        self.dropdown_label = QtWidgets.QLabel("UMAP coloration")
        self.dropdown_label.setFont(QtGui.QFont("Times", 11))

        self.output_options.addWidget(self.dropdown_label, 0, 0)

        self.dropdown = QtWidgets.QComboBox(self.MainWindow)

        # for example 
        dict = {'sonia': {'brown': 'tan', 'braids': 'tired'}, 'elijah': {'black': 'blue', 'blonde': 'yawn'}, 'lucas': {'nike': 'finland', 'curly': 'sniffle'}, 'raffa': {'skate': 'fast', 'locs': 'long'}, 'amani': {'sleep': 'happy', 'work': 'sad'}}
        
        def pathwayNames(d):
            names = []
            for pathway in d.values():
                names.extend([*pathway])
            return names

        self.dropdown.addItems(pathwayNames(dict))

        self.output_options.addWidget(self.dropdown, 1, 0, 1, 2)

        self.recolor_button = QtWidgets.QPushButton(self.MainWindow)
        self.recolor_button.setText("Recolor UMAP")
        self.recolor_button.pressed.connect(self.test_umap)

        self.output_options.addWidget(self.recolor_button, 3, 0)
    
        self.geneGeneButton = QtWidgets.QPushButton(self.MainWindow)
        self.geneGeneButton.setText("Gene-Gene Graph")
        # self.geneGeneButton.clicked.connect(self.genePopUp(self))

        self.output_options.addWidget(self.geneGeneButton, 3, 1)

        self.reRunButton = QtWidgets.QPushButton(self.MainWindow)
        self.reRunButton.setText("Run again")

        self.output_options.addWidget(self.reRunButton, 3, 2)

        self.output_options.setHorizontalSpacing(int( (self.height * 5 / 12) / 4))
        self.output_options.setRowMinimumHeight(0, int( self.height * 1 / 3 / 3))
        self.output_options.setRowMinimumHeight(2, int( self.height * 1 / 3 / 5))

        self.output_options_frame.setLayout(self.output_options)

        self.main_layout.addWidget(self.output_options_frame, 1, 0)


        self.save_options_frame = QtWidgets.QFrame()
        # self.save_options_frame.setFrameStyle(QtWidgets.QFrame.StyledPanel)
        # self.save_options_frame.setLineWidth(2)

        self.save_options = QtWidgets.QGridLayout()

        save_options_label = QtWidgets.QLabel("Save options")
        save_options_label.setFont(QtGui.QFont("Times", 11))

        self.save_options.addWidget(save_options_label, 0, 0, 1, 2)

        self.checkBox_adata = QtWidgets.QCheckBox()
        self.checkBox_adata.setText("Updated AnnData")

        self.save_options.addWidget(self.checkBox_adata, 1, 0)

        self.checkBox_model = QtWidgets.QCheckBox()
        self.checkBox_model.setText("SPECTRA model")

        self.save_options.addWidget(self.checkBox_model, 1, 2)

        self.checkBox_umap = QtWidgets.QCheckBox()
        self.checkBox_umap.setText("UMAP figure")

        self.save_options.addWidget(self.checkBox_umap, 2, 0)

        self.checkBox_heatmap = QtWidgets.QCheckBox()
        self.checkBox_heatmap.setText("Heatmap figure")
        
        self.save_options.addWidget(self.checkBox_heatmap, 2, 2)

        self.save_button = QtWidgets.QPushButton()
        self.save_button.setText("Save")

        self.save_options.addWidget(self.save_button, 3, 2)

        # self.save_options.setHorizontalSpacing(int( (self.height * 5 / 12) / 5))

        self.save_options_frame.setLayout(self.save_options)

        self.main_layout.addWidget(self.save_options_frame, 1, 2)


        self.main_layout.setRowMinimumHeight(0, int(self.height * 2 / 3))
        self.main_layout.setColumnMinimumWidth(0, int( self.width * 3 / 7))
        self.main_layout.setColumnMinimumWidth(1, int(self.width / 8))


        self.MainWindow.setLayout(self.main_layout)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    
    ui = OutputPage2(app.primaryScreen().size().width(), app.primaryScreen().size().height())
    
    ui.MainWindow.show()
    sys.exit(app.exec_())
